Adam Cole

key1.txt


Homework Exercises - Assignment 1


1.1 Moving Around in Emacs:
	C-s H T M L
	C-s s c a v e n g e r
	C-s s e l f - r e f e r e n t i a l
	C-s a r r o w
	C-e
	C-a
	C-x C-c

1.2 Deleting text in Emacs: 
	M-x g o t o - l i n e Enter 1 8 Enter C-k
	C-s < ! C-a C-k
	C-s < ! C-a C-k C-k C-k C-k C-k
	C-s < ! C-b C-b M-z >
	C-s < ! C-a C-k C-k C-k C-k C-k C-k C-k
	C-s < ! C-a C-k
	C-x C-c y

1.3 Inserting text in Emacs:
	C-s A s s i g n m e n t SP 1 M-% A s s i g n m e n t SP 4 2 Enter y y
	C-x [ C-s U T F - 8 M-% U S - A S C I I Enter y
	C-s [ ^ [ : a s c i i : ] ] C-a C-k
	C-x [ C-s < o l > Enter Enter
	C-x C-c y

1.4 Other editing tasks in Emacs:
	c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l Enter
	C-x ] C-r - < RIGHT C-SP C-e M-w M-g M-g 4 0 6 Enter C-y
	C-x ] C-r - < C-r C-r C-r RIGHT C-SP DOWN DOWN DOWN RIGHT RIGHT RIGHT M-w M-g M-g 3 8 8 Enter C-y C-a C-d UP C-d UP C-d
	C-x ] C-r - < C-r C-r C-r C-r RIGHT C-SP C-e M-w M-g M-g 3 8 7 Enter C-y C-a C-k C-k
	C-x ] C-r - < C-r C-r C-r C-r C-r RIGHT C-SP DOWN DOWN C-e M-w M-g M-g 3 4 0 Enter C-y C-a C-d UP C-d
	C-x ] C-r - < C-r C-r C-r C-r C-r C-r RIGHT C-SP C-e M-w M-g M-g 1 2 7 Enter C-y
	C-x ] C-r - < C-r C-r C-r C-r C-r C-r C-r RIGHT C-SP DOWN DOWN C-e M-w M-g M-g 1 8 Enter C-y
	C-x ] C-r - - - SP C-SP C-x ] C-w
	C-x u
	C-x ] C-r - - - SP UP < ! - - C-x ] - - >
	C-x [ C-s < o l > M-% < o L > Enter y y y y y y y
		there were 7 instances, one for each "y" above
	C-x C-c y
	d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4 . d i f f

1.5 Doing commands in Emacs:
	M-x m a k e - d i r e c t o r y Enter j u n k Enter
	C-x C-f j u n k / h e l l o . c Enter
	(Copy Paste code from website)
	M-x c o m p i l e Enter Backspace Backspace Backspace Backspace Backspace Backspace Backspace Backspace j u n k / h e l l o . c Enter
	C-x b h e l l o - o u t
	C-u M-! c d SP j u n k
	C-u M-! . / a . o u t
	#include <stdio.h>
	int
	main (void)
	{
	  char n = '\n', b = '\\', q = '"';
	  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
	  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
	  return 0;
	}

1.6 Running Elisp code:
	C-x b Enter
	( r a n d o m SP " 0 0 4 - 9 1 2 - 3 7 3 " ) C-j
		returns -960582761920207060
	( s e t q SP x SP ( r a n d o m ) ) C-j
	( s e t q SP y SP ( r a n d o m ) ) C-j
		sets x = 1987275337378876081 and sets y = -1227516194009640983
	( * SP x SP y ) Enter
		returns 1123995196323322393, which is not correct because intuitively, the product should be a negative number
	M-: ( * SP x SP y ) Enter
		returns the same result, along with the corresponding octal and hex values
		1123995196323322393 (#o76311672640606155031, #xf993bad0618da19)
	
	These integers are not truly random because there is a memory limit to how large the integer can be, while in the real world there is no limit.
	Also, the numbers can never truly be random because inherently, the computer is running a program which dictates the numbers to choose.
	The probability of the product being incorrect depends solely on overflow.  The probablity of 2 bit integer overflowing and other base cases led
	me to find the probability of overflow for an N bit integer is 2^(-N).









